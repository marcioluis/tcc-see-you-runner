/*
------------------------------------------------------------------------------
Convenção:
[] significa campos opcionais
{} significa campos obrigatórios
| (uma barra vertical) separador de sintaxe, funciona como a expressão 'ou'
MAIÚSCULA significa comando SQL
minúscula significa informado pelo usuário
------------------------------------------------------------------------------
Para adicionar um usuário ao banco de dados do SQL Server você tem que seguir três passos:

#Primeiro: você deve criar um login, que é um "cara" que tem permisssão de se logar no SQL Sever

USE MASTER;
GO
CREATE LOGIN nome_do_login { WITH <opções_1> | FROM <fontes_1> };
GO

**sendo <opções_1>:
PASSWORD = 'senha' [MUST_CHANGE], { <opções_2> }
PASSWORD = senha_hash HASHED [MUST_CHANGE], { <opções_2> }

**sendo <opções_2>:
SID = sid
DEFAULT_DATABASE = database    
DEFAULT_LANGUAGE = language
CHECK_EXPIRATION = { ON | OFF}
CHECK_POLICY = { ON | OFF}
CREDENTIAL = nome_da_credencial

**sendo <fontes_1>:
WINDOWS [ WITH <windows_options> ]
CERTIFICATE certname
ASYMMETRIC KEY asym_key_name

**sendo <windows_options>:
DEFAULT_DATABASE = database
DEFAULT_LANGUAGE = language

#Segundo: você deve criar um usuário para o banco de dados que deseja mapeando esse usuário para o login criado, 
assim seu usuário conseguirá se logar no SQL Server e entrar no banco de dados desejado.

CREATE USER nome_usuário { FOR | FROM } LOGIN nome_do_login [ WITH DEFAULT_SCHEMA = nome_schema];
GO

#Terceiro: você deve dar ou remover permissões ao usuário ou à role porque até o segundo passo o usuário criado só tem direito a entrar no banco de dados, 
dando as permissões o usuário já pode operá-lo.
Se o usuário for comum você pode adicioná-lo apenas as roles de db_reader e db_writer, que permitirá que o usuário faça select, insert, delete e update em todas as tabelas do referido banco de dados.

**GRANT <some permission> ON <some object> TO <some user, login, or group>

**se for necessário roles
CREATE ROLE role_name [ AUTHORIZATION owner_name ];
ALTER ROLE role_name { [ ADD MEMBER nome_usuário ou nome_role ] | [ DROP MEMBER nome_usuário ou nome_role ]| WITH NAME = novo_nome_role };

#Roles fixas do MSSQL:
db_owner - Members of the db_owner fixed database role can perform all configuration and maintenance activities on the database, and can also drop the database.
db_securityadmin - Members of the db_securityadmin fixed database role can modify role membership and manage permissions. Adding principals to this role could enable unintended privilege escalation.
db_accessadmin - Members of the db_accessadmin fixed database role can add or remove access to the database for Windows logins, Windows groups, and SQL Server logins.
db_backupoperator - Members of the db_backupoperator fixed database role can back up the database.
db_ddladmin - Members of the db_ddladmin fixed database role can run any Data Definition Language (DDL) command in a database.
db_datawriter - Members of the db_datawriter fixed database role can add, delete, or change data in all user tables.
db_datareader - Members of the db_datareader fixed database role can read all data from all user tables.
db_denydatawriter - Members of the db_denydatawriter fixed database role cannot add, modify, or delete any data in the user tables within a database.
db_denydatareader  - Members of the db_denydatareader fixed database role cannot read any data in the user tables within a database.
*/

/*

modificar o servidor para autorizar logins por windows e sql users
USE [master]
GO
EXEC xp_instance_regwrite N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', N'LoginMode', REG_DWORD, 2
GO

Habilitar user SA
USE [master]
GO
ALTER LOGIN [sa] WITH PASSWORD=N''
GO
ALTER LOGIN [sa] ENABLE
GO
*/
